pipeline{

agent any

tools{
maven 'maven 3.8.4'
}
options {
  //Add the Timestamp to the console output
  timestamps()
  //Discard Old Builds
  buildDiscarder logRotator(artifactDaysToKeepStr: '', artifactNumToKeepStr: '5', daysToKeepStr: '', numToKeepStr: '5')
}
stages{
 
    //Get the code from GitHub
     stage('CheckoutCode'){
  steps{
  git branch: 'development', credentialsId: 'f73b6eaf-58a4-4296-be74-4b5d67654312',url: 'https://github.com/mss-ec-apps-durgeshkalidass/maven-web-application.git'
     }
  }
  
    //Do the build
 stage('Build'){
 steps{
 sh "mvn clean package"
 }
 }
  
 //Execute SonarQube Report
 stage('SonarQubeReport'){
 steps{
 sh "mvn clean sonar:sonar"
 }
 }
 
 //Upload Artifact Into Nexus Server
 stage('UploadArtifactIntoNexusServer'){
 steps{
 sh "mvn clean deploy"
 }
 }

 //Deploy App into Tomcat Server
 stage('DeployAppIntoTomcatServer'){
 steps{
    sshagent(['20c01b1d-f7b8-4885-b5e5-8055e5aeb324']) {
      sh "scp -o StrictHostKeyChecking=no target/maven-web-application.war ec2-user@172.31.6.234:/opt/apache-tomcat-9.0.56/webapps/"
    }
 }
 }

 }//Stages Closing
 
 }
 def notifySlack(String buildStatus = 'STARTED') {
    // Build status of null means success.
    buildStatus = buildStatus ?: 'SUCCESS'

    def color

    if (buildStatus == 'STARTED') {
        color = '#FFFF00'
    } else if (buildStatus == 'SUCCESS') {
        color = '#BDFFC3'
    } else if (buildStatus == 'UNSTABLE') {
        color = '#FFFE89'
    } else {
        color = '#FF9FA1'
    }

    def msg = "${buildStatus}: `${env.JOB_NAME}` #${env.BUILD_NUMBER}:\n${env.BUILD_URL}"

    slackSend(color: color, message: msg)
}

node {
    try {
        notifySlack()

        // Existing build steps.
    } catch (e) {
        currentBuild.result = 'FAILURE'
        throw e
    } finally {
        notifySlack(currentBuild.result)
    }
}//Pipeline closing
